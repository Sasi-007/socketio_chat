const express=require("express");
const path=require("path");
const http=require("http");
const socketio=require("socket.io");
const formatMessage=require("./utils/messages");
const {getCurrentUser,userJoin,getRoomUsers,userLeave}=require("./utils/user");
const app=express();
//create server
const server=http.createServer(app);
const io=socketio(server);


//set static
//__dirname-->returns the path of the currently running file
//path.join(__dirname,'public')-->add the public to the path so it returns the single path such as w://chat/chat_application/public
app.use(express.static(path.join(__dirname,'public')))

const botName="chatCord Bot";
//run when client connects
io.on("connection",socket=>{
    console.log("server1");
    socket.on("joinRoom",({username,room})=>{
       // console.log("server2");
        //socket id ->generated by socket
        const user=userJoin(socket.id,username,room);
        socket.join(user.room);
     //welcome current user
    socket.emit("message",formatMessage(botName,"welcome to chat room"));

    //Broadcast when a user connects
    //sends the message to all users except the using user
    socket.broadcast.to(user.room).emit("message",formatMessage(botName,`${user.username} has joined the chat`));

    //send users and room info
    io.to(user.room).emit("roomUser",{
        room:user.room,
        users:getRoomUsers(user.room)
    })
    });


    //listen for chatMessage
    socket.on("chatMessage",msg=>{
        const user=getCurrentUser(socket.id);
        //console.log(msg);
        io.to(user.room).emit("message",formatMessage(user.username,msg));
    });

     //runs when a user disconnects
     socket.on("disconnect",()=>{
         
        
        const user=userLeave(socket.id);
        //console.log(user);
        if(user)
        {
            //sends message to all users
            io.to(user.room).emit("message",formatMessage(botName,`${user.username} has left the chat`));
            //send users and room info
            io.to(user.room).emit("roomUser",{
                room:user.room,
                users:getRoomUsers(user.room)
            })
        }
      
       
    });
});

const port=process.env.PORT||3000;
server.listen(port,()=>{
    console.log("server has started");
})